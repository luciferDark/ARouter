apply plugin: 'com.android.application'

android {
    def androidId = rootProject.ext.androidId
    def appId = rootProject.ext.appId

    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion

    defaultConfig {
        applicationId appId.applicationId_app
        minSdkVersion androidId.defaultConfig.minSdkVersion
        targetSdkVersion androidId.defaultConfig.targetSdkVersion
        versionCode androidId.defaultConfig.versionCode
        versionName androidId.defaultConfig.versionName
        testInstrumentationRunner androidId.defaultConfig.testInstrumentationRunner

        buildConfigField ( "boolean", "debug", "${isRelease}")
        buildConfigField ( "String", "releaseUrl", "\"${url.releaseUrl}\"")
        buildConfigField ( "String", "debugUrl", "\"${url.debugUrl}\"")

        // 可以用于传递参数到java注解编译工程中去
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        appName : appId.applicationId_app
                ]
            }
        }
    }

    buildTypes {
        debug {
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    def dependency_base = rootProject.ext.dependency_base
    def dependency_test_base = rootProject.ext.dependency_test_base
    def dependency_android_test_base = rootProject.ext.dependency_android_test_base
    dependency_base.each { k, v -> implementation v }
    dependency_test_base.each { k, v -> testImplementation v }
    dependency_android_test_base.each { k, v -> androidTestImplementation v }

    if (isRelease){
        implementation project(':sub_module1')
        implementation project(':sub_module2')
    }

    implementation project(':arouter_annotation')
    // 依赖注解处理器 注解处理器才能工作
    annotationProcessor project(":arouter_process")
}